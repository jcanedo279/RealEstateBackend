services:
  backend:
    container_name: "${BACKEND_CONTAINER_NAME}"
    build:
      context: .
      args:
        CELERY_USER: "${CELERY_USER}"
        CELERY_UID: "${CELERY_UID}"
    expose:
      - "${PORT_BACKEND}:${PORT_BACKEND}"
    env_file:
      - .env
    environment:
      - SQLALCHEMY_DATABASE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DATABASE_CONTAINER_NAME}:${PORT_DATABASE}/${DATABASE_NAME}
    networks:
      - app-network
    restart: always
    depends_on:
      - database
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${PORT_BACKEND}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1g"
        reservations:
          cpus: "0.5"
          memory: "512m"

  worker:
    build:
      context: .
      args:
        CELERY_USER: "${CELERY_USER}"
        CELERY_UID: "${CELERY_UID}"
    command: celery -A app.celery worker --loglevel=info
    user: "${CELERY_UID}:${CELERY_UID}"
    env_file:
      - .env
    environment:
      - NUMBA_CACHE_DIR=/tmp  # Set temporary cache directory.
      - NUMBA_DISABLE_JIT=1   # Disable Numba JIT to avoid caching issues.
    networks:
      - app-network
    depends_on:
      - rabbitmq
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -q 'celery worker' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1g"
        reservations:
          cpus: "0.3"
          memory: "512m"

  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      # Explicit volume for RabbitMQ data (ie user messages).
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "${RABBITMQ_MI_PORT}:${RABBITMQ_MI_PORT}"
      - "${RABBITMQ_SERVER_PORT}:${RABBITMQ_SERVER_PORT}"
    env_file:
      - .env
    environment:
      RABBITMQ_ERLANG_COOKIE: "${RABBITMQ_ERLANG_COOKIE}"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256m"
        reservations:
          cpus: "0.2"
          memory: "128m"

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.nginx
    ports:
      - "${PORT_NGINX}:80"
    networks:
      - app-network
    depends_on:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "128m"
        reservations:
          cpus: "0.1"
          memory: "64m"

  database:
    container_name: "${DATABASE_CONTAINER_NAME}"
    image: postgres:latest
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${DATABASE_NAME}"
    networks:
      - app-network
    ports:
      - "5433:${PORT_DATABASE}"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  pgdata:
  rabbitmq_data:
      
networks:
  app-network:
    driver: bridge
    name: app-network
